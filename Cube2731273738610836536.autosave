class Cube {
  float t=1;
  PImage texture = null, texture1=null, texture2=null, texture3=null, texture4=null, texture5=null, texture6=null;
  color c = 0, c1 = -1, c2 = -1, c3 = -1, c4 = -1, c5 = -1, c6 = -1 ;



  Cube( color c1, color c2, color c3, color c4, color c5, color c6, PImage tex1, PImage tex2, PImage tex3, PImage tex4, PImage tex5, PImage tex6) {
    this.t = 1;
    this.texture1 = tex1;
    this.texture2 = tex2;
    this.texture3 = tex3;
    this.texture4 = tex4;
    this.texture5 = tex5;
    this.texture6 = tex6;
    this.c1 = c1;
    this.c2 = c2;
    this.c3 = c3;
    this.c4 = c4;
    this.c5 = c5;
    this.c6 = c6;
  }

  Cube(float t) {
    this.t = t;
    this.t = 1;
  }
  Cube(color c) {
    this.c = c;
    this.t = 1;
  }
  Cube(PImage t) {
    this.texture = t;
    this.t = 1;
  }
  Cube(PImage t, boolean rep) {
    if (rep)textureWrap(REPEAT);

    this.texture = t;
    this.t = 1;
  }
  Cube() {
    this.t = 1;
  }



  PShape getCube() {
    PShape s = createShape();
    float c = t / 2;

    s.beginShape(QUADS);
    s.shininess(200.0);
    s.emissive(0, 0, 0);
    s.normal(0, 0, 1);
    s.noStroke();

    // Top
    PShape face1 = createShape();
    if (texture1 != null)
      face1.texture(texture1);
    else if (c1 != -1)
      face1.fill(c1);
    else if (texture != null)
      face1.texture(texture);
    else
      face1.fill(c);
    face1.vertex(-c, -c, -c, 0, 0);
    face1.vertex(c, -c, -c, 1, 0);
    face1.vertex(c, -c, c, 1, 1);
    face1.vertex(-c, -c, c, 0, 1);
    face1.endShape(CLOSE);


    // Front
    PShape face2 = createShape();
    if (texture2 != null)
      face2.texture(texture2);
    else if (c2 != -1)
      face2.fill(c2);
    else if (texture != null)
      face2.texture(texture);
    else
      face2.fill(c);
    face2.vertex(-c, -c, -c, 0, 0);
    face2.vertex(c, -c, -c, 1, 0);
    face2.vertex(c, c, -c, 1, 1);
    face2.vertex(-c, c, -c, 0, 1);
    face2.endShape(CLOSE);


    // Back
    PShape face3 = createShape();
    if (texture3 != null)
      face3.texture(texture3);
    else if (c3 != -1)
      face3.fill(c3);
    else if (texture != null)
      face3.texture(texture);
    else
      face3.fill(c);
    face3.vertex(c, -c, c, 0, 0);
    face3.vertex(-c, -c, c, 1, 0);
    face3.vertex(-c, c, c, 1, 1);
    face3.vertex(c, c, c, 0, 1);
    face3.endShape(CLOSE);


    // Bottom
    PShape face4 = createShape();
    if (texture4 != null)
      face4.texture(texture4);
    else if (c4 != -1)
      face4.fill(c4);
    else if (texture != null)
      face4.texture(texture);
    else
      face4.fill(c);
    face4.vertex(-c, c, -c, 0, 0);
    face4.vertex(c, c, -c, 1, 0);
    face4.vertex(c, c, c, 1, 1);
    face4.vertex(-c, c, c, 0, 1);
    face4.endShape(CLOSE);


    // Left
    PShape face5 = createShape();

    if (texture5 != null)
      face5.texture(texture5);
    else if (c5 != -1)
      face5.fill(c5);
    else if (texture != null)
      face5.texture(texture);
    else
      face5.fill(c);
    face5.vertex(-c, -c, -c, 0, 0);
    face5.vertex(-c, c, -c, 1, 0);
    face5.vertex(-c, c, c, 1, 1);
    face5.vertex(-c, -c, c, 0, 1);
    face5.endShape(CLOSE);


    // Right
    PShape face6 = createShape();

    if (texture6 != null)
      face6.texture(texture6);
    else if (c6 != -1)
      face6.fill(c6);
    else if (texture != null)
      face6.texture(texture);
    else
      face6.fill(c);
    face6.vertex(c, -c, -c, 0, 0);
    face6.vertex(c, c, -c, 1, 0);
    face6.vertex(c, c, c, 1, 1);
    face6.vertex(c, -c, c, 0, 1);
    face6.endShape(CLOSE);


    s.endShape(CLOSE);

    return s;
  }
}
